{"cells":[{"cell_type":"markdown","metadata":{"id":"8vc0Ab55Xogc"},"source":["#Vers√£o 1.3 - Protocolo de docking molecular no AutoDock Vina para o Laborat√≥rio de Atividades Biol√≥gicas (BioPhar) e Laborat√≥rio de Qu√≠mica Te√≥rica e Computacional (LQTC)\n","---\n","\n","**Desenvolvido por:**  Micael Davi Lima de Oliveira (Inicia√ß√£o Cient√≠fica )<sup>1, 2</sup> e Kelson Mota Teixeira de Oliveira (Doutor em F√≠sico-qu√≠mica e qu√≠mica te√≥rica/computacional) <sup>2</sup>\n","\n","**Agradecimentos especiais:**  Miguel Lima<sup>1</sup> (Mestrando no BioPhar)\n","\n","**Orientado por:** Emersom Silva Lima (Doutor em Bioqu√≠mica Cl√≠nica) <sup>1</sup>, Marne Vasconcellos (Doutora em Farmacologia) <sup>1</sup>. \\\\\n","<sup>1</sup> Laborat√≥rio de Atividades Biol√≥gicas, Faculdade de Ci√™ncias Farmac√™uticas, Universidade Federal do Amazonas, 69077-000, Manaus, Amazonas, Brasil; \\\\\n","<sup>2</sup> Laborat√≥rio de Qu√≠mica Te√≥rica e Computacional, Departamento de Qu√≠mica, Universidade Federal do Amazonas, 69077-000, Manaus, Amazonas, Brasil. \\\\\n","*E-mail: micael.oliveira@ufam.edu.br\n","\n","Notebook com sua primeira vers√£o em Agosto de 2023 \\\\\n","Notebook atualizado em 03 de Agosto de 2024 por Micael D. L. Oliveira.\n","\n","---\n","\n","Este caderno de Laborat√≥rio pode ser acessado eletronicamente pelo link abaixo, e tamb√©m pelo QRCode:\n","\n","[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1XwvwT8DNShkDI2FgRVdxCueQGecQAMV_?usp=sharing)\n"]},{"cell_type":"markdown","source":["<img src=\"https://qr.io/svg-download/gSwEej/DockingmolecularBioPhar\" width=\"200\" height=\"200\" />\n","<img src=\"https://qr.io/svg-download/gHFNez/LQTCDocking\" width=\"200\" height=\"200\" />\n"],"metadata":{"id":"yuuEX9c-_QuT"}},{"cell_type":"markdown","metadata":{"id":"MMP_nclleXhZ"},"source":["## A import√¢ncia do docking molecular\n","\n","Os algoritmos de docking molecular realizam uma busca pelas conforma√ß√µes mais energeticamente favor√°veis de como um composto, farm√°co ou futura medica√ß√£o ir√° se encaixar no s√≠tio do receptor. Dentre os algoritmos mais conhecidos de docking, temos o AutoDock, cuja primeira vers√£o foi publicada em 1996. Desde l√°, vem recebendo v√°rias atualiza√ß√µes ao longo do tempo, sendo a mais recente, o AutoDock Vina 1.2.5 que foi publicado em 2021, e vers√£o atual de Maio de 2023. Com o passar do tempo, e com o avan√ßo da computa√ß√£o, algoritmos diferentes foram implementados, sendo o mais atual a otimiza√ß√£o de Monte Carlo. Isto porque, √© imposs√≠vel computacionalmente abordar todas as trilh√µes de conforma√ß√µes poss√≠veis da medica√ß√£o ao interagir no s√≠tio do receptor, por isso se busca algoritmos cada vez melhores e precisos que acelerem essa busca.\n","\n","O respectivo artigo cient√≠fico da publica√ß√£o do AutoDock Vina v.1.2.5 de 2021 se encontra em:\n","\n","Eberhardt, J., Santos-Martins, D., Tillack, A. F. & Forli, S. AutoDock Vina 1.2.0: New Docking Methods, Expanded Force Field, and Python Bindings. Journal of Chemical Information and Modeling vol. 61 3891‚Äì3898 (2021). https://pubs.acs.org/doi/10.1021/acs.jcim.1c00203\n","\n","O primeiro artigo deste software foi publicado em 2009, empregando um algoritmo gen√©tico de busca:\n","Trott, O. & Olson, A. J. AutoDock Vina: Improving the speed and accuracy of docking with a new scoring function, efficient optimization, and multithreading. Journal of Computational Chemistry vol. 31 455‚Äì461 (2009). https://onlinelibrary.wiley.com/doi/10.1002/jcc.21334\n","\n","Os protocolos adotados est√£o em conformidade com o artigo publicado pelos pr√≥prios desenvolvedores do AutoDock, no Scripps Research Institute onde foi constru√≠do o pacote AutoDock:\n","https://www.nature.com/articles/nprot.2016.051"]},{"cell_type":"markdown","source":["---\n","# Quais os softwares de docking molecular existentes?\n","\n","Dentre os principais e mais consolidados, est√£o o AutoDock Vina e o CCSD Gold. Este caderno dde laborat√≥rio foi montado pensando em dockings pelo Vina, mas a mesma l√≥gica segue no GOLD. √â importante ressltar que cada algoritmo ter√° sua pr√≥pria fun√ß√£o de scoring, e consequentemente ter√£o afinidade diferentes. Por isso, o score obtido √© sempre **qualitativo** e n√£o quantitativo, como muitas vezes √© dito.\n","\n","Um conceito de F√≠sico-Qu√≠mica imprescind√≠vel para compreender o docking molecular √© a energia livre de Gibbs que nos indica a espontaneidade de intera√ß√£o f√°rmaco-receptor. Logo, quanto mais negativo o resultado mais promissor √© afinidade, e desta forma favor√°vel √† intera√ß√£o. Essa vari√°vel depender√° principalmente das intera√ß√µes eletrost√°ticas entre os √°tomos.\n","\n","Caso queira fazer o docking no pr√≥prio computador, ao inv√©s da nuvem como √© esta plataforma. Alguns softwares s√£o muito importantes:\n","\n","AutoDock Tools v.1.5.7 (2013): https://ccsb.scripps.edu/mgltools/downloads/\n","\n","Este primeiro software n√£o realiza o docking, mas apenas prepara ligantes e receptor. Enquanto o Vina √© quem propriamente faz a simula√ß√£o de docking, mas n√£o possui uma interface gr√°fica.\n","\n","AutoDock Vina v.1.2.5 (2023): https://github.com/ccsb-scripps/AutoDock-Vina/releases/download/v1.2.5/vina_1.2.5_win.exe\n","\n","\\\\\n","Enquanto, o pacote CCSD que inclui o software GOLD de docking molecular pode ser obtido gratuitamente com uma licen√ßa original no link:\n","\n","https://bdec.dotlib.com.br/"],"metadata":{"id":"w6tr623Zf1CG"}},{"cell_type":"markdown","metadata":{"id":"5nVmnMqqMx4y"},"source":["### Tutorial de como funciona esse caderno de laborat√≥rio eletr√¥nico\n","\n","Este caderno foi criado para possibilitar que todos aqui no laborat√≥rio do BioPhar consigam por conta pr√≥pria executar as simula√ß√µes de docking numa √∫nica plataforma sem necessidade de instalar v√°rios software para cada etapa, desde a prepara√ß√£o at√© realizar o docking em si, e suas respectivas an√°lises.\n","\n","O funcionamento √© relativamente simples, basta em cada c√©lula pressionar o bot√£o de \"Play\" para executar o comando:\n","\n","Contudo, alguns softwares se mostram imprescind√≠veis, tais como o Discovery Studio 2021 para constru√ß√£o do diagrama de intera√ß√µes qu√≠micas ap√≥s a conclus√£o do dokcing molecular, assim como"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nuOAtno22rgT","executionInfo":{"status":"ok","timestamp":1737747560472,"user_tz":180,"elapsed":39889,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"}},"outputId":"a7efd881-5735-4649-fe5b-b57324f2fb08"},"outputs":[{"output_type":"stream","name":"stdout","text":["Montando pasta no Google Drive para armazenar os arquivos de entrada e resultados...\n","Mounted at /content/drive\n","Instala√ß√£o da biblioteca Conda para o Google Colab necess√°ria para a execu√ß√£o dos c√°lculos ...\n","‚è¨ Downloading https://github.com/jaimergp/miniforge/releases/download/24.11.2-1_colab/Miniforge3-colab-24.11.2-1_colab-Linux-x86_64.sh...\n","üì¶ Installing...\n","üìå Adjusting configuration...\n","ü©π Patching environment...\n","‚è≤ Done in 0:00:13\n","üîÅ Restarting kernel...\n"]}],"source":["#@title **Montar pasta no Google drive para salvar os resultados e download das bibliotecas necess√°rias para o docking molecular**\n","\n","import os\n","import subprocess\n","\n","print(\"Montando pasta no Google Drive para armazenar os arquivos de entrada e resultados...\")\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","print(\"Instala√ß√£o da biblioteca Conda para o Google Colab necess√°ria para a execu√ß√£o dos c√°lculos ...\")\n","os.system(\"pip3 install -q condacolab\")\n","import condacolab\n","condacolab.install()\n","#condacolab.install(channels=[\"conda-forge\", \"bioconda\"])\n","\n","import sys\n","sys.path.append('/usr/local/lib/python3.10/site-packages/')"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"QlQ3qKbG1CIt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1737747714731,"user_tz":180,"elapsed":125415,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"}},"outputId":"09a5702d-89a0-40ea-b0e7-4e97c5819fc7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Instalando AutoDock Tools v.1.5.7...\n","Instala√ß√£o da biblioteca Meeko para prepara√ß√£o de ligantes...\n","Instala√ß√£o das bibliotecas para visualiza√ß√£o e download de prote√≠nas/receptores...\n","Instalando AutoDock Vina v.1.2.5...\n","CPU times: user 345 ms, sys: 65.6 ms, total: 411 ms\n","Wall time: 2min 4s\n"]},{"output_type":"execute_result","data":{"text/plain":["256"]},"metadata":{},"execution_count":1}],"source":["#@title **Instala√ß√£o das bibliotecas necess√°rias para o docking molecular**\n","\n","#O c√≥digo utilizado tenta tornar mais amig√°vel a interface de instala√ß√£o das bibliotecas, mas por algum motivo os comandos n√£o consegues ser executados\n","\n","%%time\n","import os\n","import subprocess\n","\n","print(\"Instalando AutoDock Tools v.1.5.7...\")\n","os.system(\"conda install -c bioconda mgltools openbabel pdbfixer\") # version of OpenBabel is 3.1.1\n","#!conda install -c hcc adfr-suite\n","#!conda config --env --add channels conda-forge\n","#!conda install -c conda-forge openbabel # Version of OpenBabel is 3.1.1\n","\n","print(\"Instala√ß√£o da biblioteca Meeko para prepara√ß√£o de ligantes...\")\n","os.system(\"pip3 install meeko kora py3Dmol\")\n","os.system(\"pip3 install rdkit pubchempy scipy pandas openbabel\")\n","\n","print(\"Instala√ß√£o das bibliotecas para visualiza√ß√£o e download de prote√≠nas/receptores...\")\n","os.system(\"pip3 install Py3Dmol nglview requests\")\n","\n","print(\"Instalando AutoDock Vina v.1.2.5...\")\n","os.system(\"pip3 install vina numpy\") # vers√£o atual do Vina v.1.2.5 (2023)\n","#!conda install -c conda-forge vina # Vers√£o antiga do Vina v.1.1.2 (2011)"]},{"cell_type":"markdown","metadata":{"id":"HYtq0SRCcvPp"},"source":["###Preparar o receptor adicionando √°tomos de Hidrog√™nio, removendo co-fatotes, ligantes co-cristalizados e mol√©culas de √°gua\n"]},{"cell_type":"markdown","metadata":{"id":"qGhi2xqr_Dfh"},"source":["O primeiro passo √© escolher o alvo molecular e que possua uma cristalografia j√° resolvida, isto √©, sua estrutura tridimensional precisa estar depositada num dos maiores banco de dados em bioinform√°tica, que √© o Protein Data Bank (https://www.rcsb.org/). Em seguida, insira um c√≥digo denominado PDB ID que identifica a estrutura alvo.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"WWbu3l8O3YlH"},"source":["Ap√≥s inserir o c√≥digo da cristalografia, √© poss√≠vel visualizar a estrutura tridimensional. Mas ainda √© necess√°rio preparar a estrutura. Vem sendo utilizado na prepara√ß√£o dos receptores o Schrodinger Maestro 2023-1, para adi√ß√£o de Hidrog√™nios e minimiza√ß√£o estrutural."]},{"cell_type":"code","source":["#@title **Exclus√£o de ligantes, co-fatores e mol√©culas de √°gua do receptor al√©m da adi√ß√£o de √°tomos de Hidrog√™nio**\n","\n","#!conda install pdbfixer openbabel\n","\n","from pdbfixer import PDBFixer\n","from openmm.app import PDBFile\n","\n","receptor_path = '/content/drive/MyDrive/smiles/docking' #@param {type:\"string\"}\n","receptor_pdb_name = 'agemmatalis' #@param {type:\"string\"}\n","receptor_output_name = 'agemmatalis_prep_python.pdb' #@param {type:\"string\"}\n","\n","%cd {receptor_path}\n","\n","fixer = PDBFixer(filename=f'{receptor_pdb_name}.pdb')\n","fixer.findMissingResidues()\n","fixer.findNonstandardResidues()\n","fixer.replaceNonstandardResidues()\n","print(\"Realizando a prepara√ß√£o do receptor com remo√ß√£o das mol√©culas de √°gua, ligantes e co-fatores\")\n","fixer.removeHeterogens(False)\n","fixer.findMissingAtoms()\n","fixer.addMissingAtoms()\n","print(\"Adiconando √°tomos de hidrog√™nios no pH de 7.4\")\n","fixer.addMissingHydrogens(7.4)\n","#fixer.addSolvent(fixer.topology.getUnitCellDimensions())\n","PDBFile.writeFile(fixer.topology, fixer.positions, open(f'{receptor_output_name}', 'w'))\n","\n","print(\"Receptor preparado com sucesso\")"],"metadata":{"id":"3h5k_cr0LpB9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734200465575,"user_tz":180,"elapsed":1678,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"}},"outputId":"52cf572d-3718-4878-c910-9af5cc808474"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/smiles/docking\n","Realizando a prepara√ß√£o do receptor com remo√ß√£o das mol√©culas de √°gua, ligantes e co-fatores\n","Adiconando √°tomos de hidrog√™nios no pH de 7.4\n","Receptor preparado com sucesso\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1867,"status":"ok","timestamp":1734200599669,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"},"user_tz":180},"id":"zxlH79o_cprY","outputId":"5338845c-e896-4041-c468-b706093ff1a6"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/smiles/docking\n","Preparando o receptor e convertendo para o formato .pdbqt\n","set verbose to  True\n","read  agemmatalis_prep_python.pdb\n","setting up RPO with mode= automatic and outputfilename=  agemmatalis.pdbqt\n","charges_to_add= gasteiger\n","delete_single_nonstd_residues= None\n","adding gasteiger charges to peptide\n","Receptor foi preparado com sucesso!\n"]}],"source":["#@title **Prepara√ß√£o do receptor e convers√£o para o formato .pdbqt**\n","\n","import os\n","\n","receptor_path = '/content/drive/MyDrive/smiles/docking' #@param {type:\"string\"}\n","receptor_pdb_name = 'agemmatalis_prep_python' #@param {type:\"string\"}\n","receptor_pdbqt_name = \"agemmatalis\" #@param {type:\"string\"}\n","%cd {receptor_path}\n","\n","print(\"Preparando o receptor e convertendo para o formato .pdbqt\")\n","!prepare_receptor4.py -r {receptor_pdb_name}.pdb -o {receptor_pdbqt_name}.pdbqt -A hydrogens -U nphs_lps -v # Using AutoDock Tools 1.5.7 rc1\n","\n","print(\"Receptor foi preparado com sucesso!\")"]},{"cell_type":"markdown","source":["Nesta etapa, insira o diret√≥rio no Google Drive onde receptor a ser testado se encontra para ent√£o ser preparado e convertido para .pdbqt"],"metadata":{"id":"tyreIXVfJP8U"}},{"cell_type":"markdown","metadata":{"id":"fGg3Imcv2_T8"},"source":["# Descoberta das coordenadas do s√≠tio de liga√ß√£o do alvo molecular\n","\n","Inicialmente as coordenadas do s√≠tio de liga√ß√£o dos receptores ser√£o obtidas pelo AutoDock Tools. Desta forma, primeiramente houve a remo√ß√£o do ligante presente na cristalografia proveniente do Protein Data Bank e depois como se fosse um \"receptor\", foi descoberto seu centro de massa que ser√° justamente o s√≠tio do receptor. Contudo, ao realizar o c√°lculo do centro de massa por outras ferramentas integradas ao Python, as coordenadas diferem entre si."]},{"cell_type":"markdown","metadata":{"id":"yoYV6jnvkAdc"},"source":["## Prepara√ß√£o do ligante via Python\n","\n","Nesta etapa √© preciso que se tenha o nome comum para a mol√©cula a ser simulada, caso ela j√° se encontre na base de dados PubChem (https://pubchem.ncbi.nlm.nih.gov/), busque pelo seu nome usual ou sin√¥nimos, como tamb√©m a nomenclatura IUPAC.\n"]},{"cell_type":"markdown","metadata":{"id":"5B2UVC4z7yLf"},"source":["Caso seja uma mol√©cula nova √© preciso utilizar um software para desenho de estruturas qu√≠micas como o ACD ChemSketch (gratuito para fins acad√™micos),Perkin Elmer ChemDraw (pago) ou MarvinSketch (gratuito para fins acad√™micos). Depois, basta selecionar a respectiva estrutura e copiar como um c√≥digo SMILES, que √© uma representa√ß√£o computacional para visualiza√ß√£o de mol√©culas.\n","\n","MarvinJS: https://marvinjs-demo.chemaxon.com/latest/demo.html \\\\\n","*Obs.: √â uma vers√£o mais simples e portanto com menos recursos do que o MarvinSketch, mas que roda diretamente no navegador sem a necessidade da instala√ß√£o do software.* \\\\\n","\n","Perkin Elmer ChemDraw: https://drive.google.com/file/d/1VxrOm41_oONNMInfsWt1pMQ6G8_r7PI4/view?usp=sharing \\\\\n","\n","MarvinSketch: https://download.chemaxon.com/marvin \\\\\n","\n","ACD ChemSketch: https://www.acdlabs.com/resources/free-chemistry-software-apps/chemsketch-freeware/"]},{"cell_type":"markdown","metadata":{"id":"S0-sGtS3fZFx"},"source":["##Pular esta etapa caso tenha encontrado com sucesso a mol√©cula submetida anteriormente"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":317},"executionInfo":{"elapsed":6576,"status":"ok","timestamp":1737414607550,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"},"user_tz":180},"id":"oQC0o0qr78Pr","outputId":"b1c7b7da-3c53-4523-96c0-8963079dfd4d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<PIL.PngImagePlugin.PngImageFile image mode=RGB size=300x300>"],"image/png":"\n","image/jpeg":"\n"},"metadata":{},"execution_count":3}],"source":["#@title **Constru√ß√£o da mol√©cula 2D a partir do c√≥digo SMILES fornecido**\n","\n","os.system(\"pip3 install rdkit scipy pandas\")\n","\n","codigo_SMILES = \"Cl.CC(C)(Cc1ccc(s1)C(=O)Oc1ccc(cc1F)C(N)=N)C(=O)NCC(O)=O\" #@param {type:\"string\"}\n","\n","from rdkit import Chem\n","from rdkit.Chem import Draw\n","m = Chem.MolFromSmiles(codigo_SMILES)\n","Draw.MolToImage(m)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"elapsed":2633,"status":"ok","timestamp":1737414645768,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"},"user_tz":180},"id":"o7DB9izQ92Fw","outputId":"4a5f9cfc-b2c9-4f25-d3d2-5c1d4b529270"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/smiles/docking\n","A estrutura tridimensional da mol√©cula escolhida foi salva com sucesso em .mol2\n"]},{"output_type":"display_data","data":{"application/3dmoljs_load.v0":"<div id=\"3dmolviewer_173741462955566\"  style=\"position: relative; width: 400px; height: 400px;\">\n        <p id=\"3dmolwarning_173741462955566\" style=\"background-color:#ffcccc;color:black\">3Dmol.js failed to load for some reason.  Please check your browser console for error messages.<br></p>\n        </div>\n<script>\n\nvar loadScriptAsync = function(uri){\n  return new Promise((resolve, reject) => {\n    //this is to ignore the existence of requirejs amd\n    var savedexports, savedmodule;\n    if (typeof exports !== 'undefined') savedexports = exports;\n    else exports = {}\n    if (typeof module !== 'undefined') savedmodule = module;\n    else module = {}\n\n    var tag = document.createElement('script');\n    tag.src = uri;\n    tag.async = true;\n    tag.onload = () => {\n        exports = savedexports;\n        module = savedmodule;\n        resolve();\n    };\n  var firstScriptTag = document.getElementsByTagName('script')[0];\n  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n});\n};\n\nif(typeof $3Dmolpromise === 'undefined') {\n$3Dmolpromise = null;\n  $3Dmolpromise = loadScriptAsync('https://cdnjs.cloudflare.com/ajax/libs/3Dmol/2.4.2/3Dmol-min.js');\n}\n\nvar viewer_173741462955566 = null;\nvar warn = document.getElementById(\"3dmolwarning_173741462955566\");\nif(warn) {\n    warn.parentNode.removeChild(warn);\n}\n$3Dmolpromise.then(function() {\nviewer_173741462955566 = $3Dmol.createViewer(document.getElementById(\"3dmolviewer_173741462955566\"),{backgroundColor:\"white\"});\nviewer_173741462955566.zoomTo();\n\tviewer_173741462955566.addModel(\"\\n     RDKit          3D\\n\\n 51 51  0  0  0  0  0  0  0  0999 V2000\\n    0.6828    0.0000    0.0000 Cl  0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.2449   -1.3974   -1.8115 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -3.9958   -1.9383   -0.4452 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.8810   -3.1799   -0.2662 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -2.6022   -2.3902   -0.1881 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -1.5837   -1.3106   -0.3409 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -1.7006   -0.0036   -0.6666 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.5818    0.7437   -0.7280 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    0.6022    0.1726   -0.4666 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    0.1956   -1.5521   -0.0958 S   0  0  0  0  0  0  0  0  0  0  0  0\\n    1.9278    0.7421   -0.4637 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    2.0901    1.9563   -0.7377 O   0  0  0  0  0  0  0  0  0  0  0  0\\n    3.0112   -0.0994   -0.1480 O   0  0  0  0  0  0  0  0  0  0  0  0\\n    4.3037    0.3803   -0.1272 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    5.0381    0.3263   -1.2881 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    6.3308    0.8129   -1.2427 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    6.8876    1.3397   -0.0842 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    6.1391    1.3907    1.0843 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    4.8370    0.9002    1.0376 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    4.0937    0.9463    2.1817 F   0  0  0  0  0  0  0  0  0  0  0  0\\n    8.2598    1.8392   -0.0971 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    9.1085    1.8139    1.0401 N   0  0  0  0  0  0  0  0  0  0  0  0\\n    8.7063    2.3247   -1.2076 N   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.4715   -1.0040    0.6374 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -3.6854   -0.5330    1.4996 O   0  0  0  0  0  0  0  0  0  0  0  0\\n   -5.8540   -0.6567    0.6679 N   0  0  0  0  0  0  0  0  0  0  0  0\\n   -6.2727    0.2568    1.7408 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -5.5651    1.5475    1.6622 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.6418    1.7791    0.6710 O   0  0  0  0  0  0  0  0  0  0  0  0\\n   -5.7891    2.4686    2.5008 O   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.6828    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.8781   -2.1025   -2.4147 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -3.2881   -1.3443   -2.3703 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.7683   -0.4279   -1.7431 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -5.0347   -3.3380    0.8082 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.3044   -4.0432   -0.6916 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -5.7980   -3.1261   -0.8710 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -2.3945   -3.2409   -0.8693 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -2.5730   -2.7466    0.8730 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -2.7085    0.4337   -0.8768 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.6343    1.8353   -0.9953 H   0  0  0  0  0  0  0  0  0  0  0  0\\n    4.6024   -0.0852   -2.1920 H   0  0  0  0  0  0  0  0  0  0  0  0\\n    6.8884    0.7573   -2.1764 H   0  0  0  0  0  0  0  0  0  0  0  0\\n    6.5413    1.7947    2.0056 H   0  0  0  0  0  0  0  0  0  0  0  0\\n    8.8473    2.1920    1.9762 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   10.0765    1.3934    0.9771 H   0  0  0  0  0  0  0  0  0  0  0  0\\n    8.1544    2.3768   -2.0690 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -6.5275   -1.0242   -0.0234 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -7.3631    0.5051    1.6093 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -6.1468   -0.2039    2.7265 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.3526    2.7186    0.3683 H   0  0  0  0  0  0  0  0  0  0  0  0\\n  2  3  1  0\\n  3  4  1  0\\n  3  5  1  0\\n  5  6  1  0\\n  6  7  2  0\\n  7  8  1  0\\n  8  9  2  0\\n  9 10  1  0\\n  9 11  1  0\\n 11 12  2  0\\n 11 13  1  0\\n 13 14  1  0\\n 14 15  2  0\\n 15 16  1  0\\n 16 17  2  0\\n 17 18  1  0\\n 18 19  2  0\\n 19 20  1  0\\n 17 21  1  0\\n 21 22  1  0\\n 21 23  2  3\\n  3 24  1  0\\n 24 25  2  0\\n 24 26  1  0\\n 26 27  1  0\\n 27 28  1  0\\n 28 29  1  0\\n 28 30  2  0\\n 10  6  1  0\\n 19 14  1  0\\n  1 31  1  0\\n  2 32  1  0\\n  2 33  1  0\\n  2 34  1  0\\n  4 35  1  0\\n  4 36  1  0\\n  4 37  1  0\\n  5 38  1  0\\n  5 39  1  0\\n  7 40  1  0\\n  8 41  1  0\\n 15 42  1  0\\n 16 43  1  0\\n 18 44  1  0\\n 22 45  1  0\\n 22 46  1  0\\n 23 47  1  0\\n 26 48  1  0\\n 27 49  1  0\\n 27 50  1  0\\n 29 51  1  0\\nM  END\\n\",\"mol\");\n\tviewer_173741462955566.setStyle({\"stick\": {}});\n\tviewer_173741462955566.zoomTo();\nviewer_173741462955566.render();\n});\n</script>","text/html":["<div id=\"3dmolviewer_173741462955566\"  style=\"position: relative; width: 400px; height: 400px;\">\n","        <p id=\"3dmolwarning_173741462955566\" style=\"background-color:#ffcccc;color:black\">3Dmol.js failed to load for some reason.  Please check your browser console for error messages.<br></p>\n","        </div>\n","<script>\n","\n","var loadScriptAsync = function(uri){\n","  return new Promise((resolve, reject) => {\n","    //this is to ignore the existence of requirejs amd\n","    var savedexports, savedmodule;\n","    if (typeof exports !== 'undefined') savedexports = exports;\n","    else exports = {}\n","    if (typeof module !== 'undefined') savedmodule = module;\n","    else module = {}\n","\n","    var tag = document.createElement('script');\n","    tag.src = uri;\n","    tag.async = true;\n","    tag.onload = () => {\n","        exports = savedexports;\n","        module = savedmodule;\n","        resolve();\n","    };\n","  var firstScriptTag = document.getElementsByTagName('script')[0];\n","  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n","});\n","};\n","\n","if(typeof $3Dmolpromise === 'undefined') {\n","$3Dmolpromise = null;\n","  $3Dmolpromise = loadScriptAsync('https://cdnjs.cloudflare.com/ajax/libs/3Dmol/2.4.2/3Dmol-min.js');\n","}\n","\n","var viewer_173741462955566 = null;\n","var warn = document.getElementById(\"3dmolwarning_173741462955566\");\n","if(warn) {\n","    warn.parentNode.removeChild(warn);\n","}\n","$3Dmolpromise.then(function() {\n","viewer_173741462955566 = $3Dmol.createViewer(document.getElementById(\"3dmolviewer_173741462955566\"),{backgroundColor:\"white\"});\n","viewer_173741462955566.zoomTo();\n","\tviewer_173741462955566.addModel(\"\\n     RDKit          3D\\n\\n 51 51  0  0  0  0  0  0  0  0999 V2000\\n    0.6828    0.0000    0.0000 Cl  0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.2449   -1.3974   -1.8115 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -3.9958   -1.9383   -0.4452 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.8810   -3.1799   -0.2662 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -2.6022   -2.3902   -0.1881 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -1.5837   -1.3106   -0.3409 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -1.7006   -0.0036   -0.6666 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.5818    0.7437   -0.7280 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    0.6022    0.1726   -0.4666 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    0.1956   -1.5521   -0.0958 S   0  0  0  0  0  0  0  0  0  0  0  0\\n    1.9278    0.7421   -0.4637 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    2.0901    1.9563   -0.7377 O   0  0  0  0  0  0  0  0  0  0  0  0\\n    3.0112   -0.0994   -0.1480 O   0  0  0  0  0  0  0  0  0  0  0  0\\n    4.3037    0.3803   -0.1272 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    5.0381    0.3263   -1.2881 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    6.3308    0.8129   -1.2427 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    6.8876    1.3397   -0.0842 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    6.1391    1.3907    1.0843 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    4.8370    0.9002    1.0376 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    4.0937    0.9463    2.1817 F   0  0  0  0  0  0  0  0  0  0  0  0\\n    8.2598    1.8392   -0.0971 C   0  0  0  0  0  0  0  0  0  0  0  0\\n    9.1085    1.8139    1.0401 N   0  0  0  0  0  0  0  0  0  0  0  0\\n    8.7063    2.3247   -1.2076 N   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.4715   -1.0040    0.6374 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -3.6854   -0.5330    1.4996 O   0  0  0  0  0  0  0  0  0  0  0  0\\n   -5.8540   -0.6567    0.6679 N   0  0  0  0  0  0  0  0  0  0  0  0\\n   -6.2727    0.2568    1.7408 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -5.5651    1.5475    1.6622 C   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.6418    1.7791    0.6710 O   0  0  0  0  0  0  0  0  0  0  0  0\\n   -5.7891    2.4686    2.5008 O   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.6828    0.0000    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.8781   -2.1025   -2.4147 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -3.2881   -1.3443   -2.3703 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.7683   -0.4279   -1.7431 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -5.0347   -3.3380    0.8082 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.3044   -4.0432   -0.6916 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -5.7980   -3.1261   -0.8710 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -2.3945   -3.2409   -0.8693 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -2.5730   -2.7466    0.8730 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -2.7085    0.4337   -0.8768 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -0.6343    1.8353   -0.9953 H   0  0  0  0  0  0  0  0  0  0  0  0\\n    4.6024   -0.0852   -2.1920 H   0  0  0  0  0  0  0  0  0  0  0  0\\n    6.8884    0.7573   -2.1764 H   0  0  0  0  0  0  0  0  0  0  0  0\\n    6.5413    1.7947    2.0056 H   0  0  0  0  0  0  0  0  0  0  0  0\\n    8.8473    2.1920    1.9762 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   10.0765    1.3934    0.9771 H   0  0  0  0  0  0  0  0  0  0  0  0\\n    8.1544    2.3768   -2.0690 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -6.5275   -1.0242   -0.0234 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -7.3631    0.5051    1.6093 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -6.1468   -0.2039    2.7265 H   0  0  0  0  0  0  0  0  0  0  0  0\\n   -4.3526    2.7186    0.3683 H   0  0  0  0  0  0  0  0  0  0  0  0\\n  2  3  1  0\\n  3  4  1  0\\n  3  5  1  0\\n  5  6  1  0\\n  6  7  2  0\\n  7  8  1  0\\n  8  9  2  0\\n  9 10  1  0\\n  9 11  1  0\\n 11 12  2  0\\n 11 13  1  0\\n 13 14  1  0\\n 14 15  2  0\\n 15 16  1  0\\n 16 17  2  0\\n 17 18  1  0\\n 18 19  2  0\\n 19 20  1  0\\n 17 21  1  0\\n 21 22  1  0\\n 21 23  2  3\\n  3 24  1  0\\n 24 25  2  0\\n 24 26  1  0\\n 26 27  1  0\\n 27 28  1  0\\n 28 29  1  0\\n 28 30  2  0\\n 10  6  1  0\\n 19 14  1  0\\n  1 31  1  0\\n  2 32  1  0\\n  2 33  1  0\\n  2 34  1  0\\n  4 35  1  0\\n  4 36  1  0\\n  4 37  1  0\\n  5 38  1  0\\n  5 39  1  0\\n  7 40  1  0\\n  8 41  1  0\\n 15 42  1  0\\n 16 43  1  0\\n 18 44  1  0\\n 22 45  1  0\\n 22 46  1  0\\n 23 47  1  0\\n 26 48  1  0\\n 27 49  1  0\\n 27 50  1  0\\n 29 51  1  0\\nM  END\\n\",\"mol\");\n","\tviewer_173741462955566.setStyle({\"stick\": {}});\n","\tviewer_173741462955566.zoomTo();\n","viewer_173741462955566.render();\n","});\n","</script>"]},"metadata":{}}],"source":["#@title **Gera√ß√£o da estrutura tridimensional da mol√©cula escolhida anteriormente**\n","\n","import kora.install.rdkit\n","from rdkit import Chem\n","from rdkit.Chem import AllChem\n","import py3Dmol\n","\n","molecule_name = \"MVDO\" #@param {type:\"string\"}\n","result_file_path = \"/content/drive/MyDrive/smiles/docking\" #@param {type:\"string\"}\n","%cd {result_file_path}\n","\n","def show(smi, style='stick'):\n","    mol = Chem.MolFromSmiles(smi)\n","    mol = Chem.AddHs(mol)\n","    AllChem.EmbedMolecule(mol)\n","    AllChem.MMFFOptimizeMolecule(mol, maxIters=20000)\n","    mblock = Chem.MolToMolBlock(mol)\n","\n","    mol = Chem.MolFromMolBlock(mblock)\n","\n","    # Save the molecule to a .mol2 file\n","    mol2_filename = f\"\"\"{molecule_name}.mol2\"\"\"\n","    Chem.MolToMolFile(mol, mol2_filename)\n","    print(\"A estrutura tridimensional da mol√©cula escolhida foi salva com sucesso em .mol2\")\n","\n","    #mblock = Chem.MolToMolBlock(mol)\n","\n","    view = py3Dmol.view(width=400, height=400)\n","    view.addModel(mblock, 'mol')\n","    view.setStyle({style:{}})\n","    view.zoomTo()\n","    view.show()\n","\n","# example\n","show(codigo_SMILES)  # or 'P'"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1213,"status":"ok","timestamp":1737418781561,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"},"user_tz":180},"id":"8drfQJih2GMC","outputId":"2e5a8d1b-526d-4586-f822-ab70d87bd137"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/smiles/docking\n","set verbose to  True\n","read  teste2.pdb\n","setting up LPO with mode= automatic and outputfilename=  teste2.pdbqt\n","and check_for_fragments= False\n","and bonds_to_inactivate= \n","returning  0\n","No change in atomic coordinates\n"]}],"source":["#@title **Prepara√ß√£o e convers√£o do ligante para o formato .pdbqt necess√°rio para o docking molecular usando o algoritmo AutoDock Tools 1.5.7**\n","\n","ligand_path = '/content/drive/MyDrive/smiles/docking' #@param {type:\"string\"}\n","%cd {ligand_path}\n","\n","ligand_name = \"teste2\" #@param {type:\"string\"}\n","\n","!prepare_ligand4.py -l {ligand_name}.pdb -o {ligand_name}.pdbqt -U nphs_lps -v"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":299,"status":"ok","timestamp":1737420073868,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"},"user_tz":180},"id":"fyCT66B4nxCJ","outputId":"ef04a4d9-e842-4cd8-961b-1cb68aa74aa1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Grid box center x: -8.028\n","/content/drive/MyDrive/smiles/docking/results\n","O arquivo 'config_docking_teste2.txt' foi criado e salvo com sucesso.\n"]}],"source":["#@title **Gera√ß√£o do arquivo de configura√ß√£o necess√°rio para o docking molecular**\n","\n","ligand_path = '/content/drive/MyDrive/smiles/docking' #@param {type:\"string\"}\n","ligand_name = \"teste2.pdbqt\" #@param {type:\"string\"}\n","receptor_name = \"agemmatalis.pdbqt\" #@param {type:\"string\"}\n","\n","grid_box_size_x = \"126\"  #@param {type:\"string\"}\n","grid_box_size_y = \"116\" #@param {type:\"string\"}\n","grid_box_size_z = \"126\" #@param {type:\"string\"}\n","\n","grid_box_center_x = \"-8.028\" #@param {type:\"string\"}\n","grid_box_center_y = \"4.389\" #@param {type:\"string\"}\n","grid_box_center_z = \"-0.0\" #@param {type:\"string\"}\n","\n","print(\"Grid box center x:\", grid_box_center_x)\n","\n","exhaustiveness = \"96\" #@param {type:\"string\"}\n","docking_results_path = '/content/drive/MyDrive/smiles/docking/results' #@param {type:\"string\"}\n","%cd {docking_results_path}\n","docking_results_name = 'result_docking_teste2' #@param {type:\"string\"}\n","config_file_name = 'config_docking_teste2.txt' #@param {type:\"string\"}\n","\n","# Define the text content\n","text_content = f\"\"\"receptor = /content/drive/MyDrive/smiles/docking/{receptor_name}\n","ligand = {ligand_path}/{ligand_name}\n","center_x = {grid_box_center_x}\n","center_y = {grid_box_center_y}\n","center_z = {grid_box_center_z}\n","size_x = {grid_box_size_x}\n","size_y = {grid_box_size_y}\n","size_z = {grid_box_size_z}\n","out = {docking_results_name}.pdbqt\n","exhaustiveness = {exhaustiveness}\n","\"\"\"\n","\n","# Specify the file name\n","file_name = f\"{config_file_name}\"\n","\n","# Open the file in write mode and write the content\n","with open(file_name, \"w\") as file:\n","    file.write(text_content)\n","\n","print(f\"O arquivo '{file_name}' foi criado e salvo com sucesso.\")"]},{"cell_type":"markdown","metadata":{"id":"P4Ovhzii_tLa"},"source":["##Realiza√ß√£o das simula√ß√µes de docking molecular com o AutoDock Vina v.1.2.5"]},{"cell_type":"markdown","metadata":{"id":"YPevxTIEAHfH"},"source":["Para cada complexo prote√≠na-ligante √© executado o script de docking abaixo. Se for considerado a flexibilidade parcial do receptor, basta colocar o nome do arquivo .pdbqt flex√≠vel ao lado do nome para a estrutura r√≠gida. Mesmo o algoritmo limitando para"]},{"cell_type":"code","source":["import os\n","print(\"Diret√≥rio atual:\", os.getcwd())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5hsF08sIsixt","executionInfo":{"status":"ok","timestamp":1737416242367,"user_tz":180,"elapsed":281,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"}},"outputId":"623c8360-6c2a-4f92-d3cd-36db926f1009"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Diret√≥rio atual: /content/drive/MyDrive/smiles/docking/results\n"]}]},{"cell_type":"code","source":["!chmod +x ./vina_1.2.5_linux_x86_64"],"metadata":{"id":"2NgwaKzSs4Qw"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mCh2zGgJFfqv","outputId":"b56c9634-c108-4935-9d9d-c48c80d37d43","executionInfo":{"status":"ok","timestamp":1737421919453,"user_tz":180,"elapsed":1837019,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Realizando o docking molecular...\n","AutoDock Vina v1.2.5\n","#################################################################\n","# If you used AutoDock Vina in your work, please cite:          #\n","#                                                               #\n","# J. Eberhardt, D. Santos-Martins, A. F. Tillack, and S. Forli  #\n","# AutoDock Vina 1.2.0: New Docking Methods, Expanded Force      #\n","# Field, and Python Bindings, J. Chem. Inf. Model. (2021)       #\n","# DOI 10.1021/acs.jcim.1c00203                                  #\n","#                                                               #\n","# O. Trott, A. J. Olson,                                        #\n","# AutoDock Vina: improving the speed and accuracy of docking    #\n","# with a new scoring function, efficient optimization and       #\n","# multithreading, J. Comp. Chem. (2010)                         #\n","# DOI 10.1002/jcc.21334                                         #\n","#                                                               #\n","# Please see https://github.com/ccsb-scripps/AutoDock-Vina for  #\n","# more information.                                             #\n","#################################################################\n","\n","Scoring function : vina\n","Rigid receptor: /content/drive/MyDrive/smiles/docking/agemmatalis.pdbqt\n","Ligand: /content/drive/MyDrive/smiles/docking/teste2.pdbqt\n","Grid center: X -8.028 Y 4.389 Z -0\n","Grid size  : X 126 Y 116 Z 126\n","Grid space : 0.375\n","Exhaustiveness: 96\n","CPU: 0\n","Verbosity: 1\n","\n","WARNING: Search space volume is greater than 27000 Angstrom^3 (See FAQ)\n","Computing Vina grid ... done.\n","Performing docking (random seed: 320557644) ... \n","0%   10   20   30   40   50   60   70   80   90   100%\n","|----|----|----|----|----|----|----|----|----|----|\n","***************************************************\n","\n","mode |   affinity | dist from best mode\n","     | (kcal/mol) | rmsd l.b.| rmsd u.b.\n","-----+------------+----------+----------\n","   1       -6.872          0          0\n","   2       -6.803      3.371      7.956\n","   3       -6.764      3.339      8.248\n","   4       -6.761      3.854      9.571\n","   5       -6.612      3.263       4.38\n","   6       -6.554      5.706      8.451\n","   7       -6.538      3.495      6.958\n","   8       -6.534      5.771      10.24\n","   9       -6.367      5.856      10.26\n"]}],"source":["#@title **Execu√ß√£o do docking molecular a partir do ligante e receptor descritos nas etapas anteriores**\n","\n","config_file_name = '/content/drive/MyDrive/smiles/docking/results/config_docking_teste2.txt' #@param {type:\"string\"}\n","\n","print(\"Realizando o docking molecular...\")\n","!./vina_1.2.5_linux_x86_64 --config {config_file_name}"]},{"cell_type":"markdown","metadata":{"id":"HO7hCkgKqeDG"},"source":["#Analisando os resultados obtidos pelo docking molecular\n"]},{"cell_type":"code","source":["# Caminho para o arquivo PDBQT original\n","pdbqt_file_path = '/content/drive/MyDrive/smiles/docking/results/result_docking_teste.pdbqt' #@param {type:\"string\"}\n","output_model_1_pdbqt_path = '/content/drive/MyDrive/smiles/docking/results/model_1_results.pdbqt' #@param {type:\"string\"}\n","\n","# Lendo o arquivo PDBQT original\n","with open(pdbqt_file_path, 'r') as file:\n","    pdbqt_content = file.readlines()\n","\n","# Extraindo o MODEL 1\n","model_start = None\n","model_end = None\n","\n","for i, line in enumerate(pdbqt_content):\n","    if line.startswith(\"MODEL 1\"):\n","        model_start = i\n","    if line.startswith(\"ENDMDL\") and model_start is not None:\n","        model_end = i\n","        break\n","\n","if model_start is not None and model_end is not None:\n","    model_1_content = pdbqt_content[model_start:model_end + 1]\n","    # Salvando o MODEL 1 em um novo arquivo PDBQT\n","    with open(output_model_1_pdbqt_path, 'w') as file:\n","        file.writelines(model_1_content)\n","    print(f\"Arquivo com o MODEL 1 salvo em: {output_model_1_pdbqt_path}\")\n","else:\n","    print(\"MODEL 1 n√£o encontrado no arquivo PDBQT original.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vv0BLH4c6B0r","executionInfo":{"status":"ok","timestamp":1737417346951,"user_tz":180,"elapsed":288,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"}},"outputId":"5fa44194-a798-4c2b-98b0-9595a1ee2d63"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Arquivo com o MODEL 1 salvo em: /content/drive/MyDrive/smiles/docking/results/model_1_results.pdbqt\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":561,"status":"ok","timestamp":1737417368813,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"},"user_tz":180},"id":"OS3Z7N5NhKB6","outputId":"c1de3c3f-f04a-4498-f7ad-1c34f93188bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/smiles/docking/results\n","==============================\n","*** Open Babel Warning  in InChI code\n","  model_1_results.pdbqt :Accepted unusual valence(s): C(3); C(2); C(1)\n","1 molecule converted\n"]}],"source":["#@title **Convers√£o do resultado de .pdbqt para .pdb**\n","\n","#We need to convert our Autodock Vina results from pdbqt into pdb\n","#For this, we use babel\n","docking_results_path = '/content/drive/MyDrive/smiles/docking/results' #@param {type:\"string\"}\n","%cd {docking_results_path}\n","\n","ligand_name = \"model_1_results\" #@param {type:\"string\"}\n","\n","!obabel -ipdbqt {ligand_name}.pdbqt -opdb -O {ligand_name}.pdb -p --unique --title {ligand_name}"]},{"cell_type":"code","source":["os.system(\"pip3 install parmed\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NegzBprYz95c","executionInfo":{"status":"ok","timestamp":1737747729444,"user_tz":180,"elapsed":13597,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"}},"outputId":"37eb19fe-14d8-4b5e-81df-7984c0fe06c8"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["#@title **Uni√£o do complexo prote√≠na-ligante final a partir do resultado de docking**\n","\n","import parmed as pmd\n","\n","%cd /content/drive/MyDrive/smiles/docking/results\n","\n","ligand_pdb_file = \"model_1_results.pdb\"        #@param {type:\"string\"}\n","receptor_pdb_file = \"agemmatalis.pdb\"    #@param {type:\"string\"}\n","output_pdb_file = \"complex_python_protein_ligand.pdb\"  #@param {type:\"string\"}\n","\n","pdb1 = pmd.load_file(f\"{ligand_pdb_file}\")\n","pdb2 = pmd.load_file(f\"{receptor_pdb_file}\")\n","\n","combined = pdb1 + pdb2\n","combined.save(f\"{output_pdb_file}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TKZx4tHERZLG","executionInfo":{"status":"ok","timestamp":1737417389902,"user_tz":180,"elapsed":1825,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"}},"outputId":"474870e7-e0b7-40e0-f320-33a1375f6d5e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/smiles/docking/results\n"]}]},{"cell_type":"code","source":["import parmed as pmd\n","import os\n","\n","# Caminho para o diret√≥rio onde est√£o os arquivos PDB\n","ligands_dir = \"/content/drive/MyDrive/smiles/docking/results/ligands\"  # Substituir pelo caminho correto\n","receptor_pdb_file = \"/content/drive/MyDrive/smiles/docking/results/agemmatalis.pdb\"  # Arquivo da protease\n","output_pdb_file = \"/content/drive/MyDrive/smiles/docking/results/complex_protein_all_ligands.pdb\"  # Sa√≠da\n","\n","# Carregar a prote√≠na\n","receptor = pmd.load_file(receptor_pdb_file)\n","\n","# Iterar sobre os arquivos de ligantes\n","for ligand_file in os.listdir(ligands_dir):\n","    if ligand_file.endswith(\".pdb\"):  # Garantir que o arquivo √© PDB\n","        ligand_path = os.path.join(ligands_dir, ligand_file)\n","        ligand = pmd.load_file(ligand_path)\n","        receptor += ligand  # Combinar com a prote√≠na\n","\n","# Salvar o complexo final\n","receptor.save(output_pdb_file)\n","\n","print(f\"Arquivo PDB final gerado: {output_pdb_file}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RnmfJtfM9Qu2","executionInfo":{"status":"ok","timestamp":1737747739929,"user_tz":180,"elapsed":8430,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"}},"outputId":"675cc4ef-e70a-4834-b44b-c5dc3ee09d54"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Arquivo PDB final gerado: /content/drive/MyDrive/smiles/docking/results/complex_protein_all_ligands.pdb\n"]}]},{"cell_type":"markdown","source":["### Como construir um diagrama de intera√ß√µes qu√≠micas\n","\n","Primeiramente √© fundamental que se tenha o complexo prote√≠na-ligante j√° montado no formato .pdb para a visualiza√ß√£o da intera√ß√£o de forma visual e tridimensional. Isso pode ser feito com o aux√≠lio do software Schrodinger Maestro 2022-1, o qual facilita bastante desde o processo de prepara√ß√£o at√© a visualiza√ß√£o dos resultados.\n","\n","Nesta etapa, √© fundamental que se utilize tamb√©m o software Discovery Studio para constru√ß√£o do que chamos de diagrama de intera√ß√µes qu√≠micas, possibilitando entender melhor o mecanismo de a√ß√£o pelo qual uma medica√ß√£o age no organismo.\n","https://discover.3ds.com/discovery-studio-visualizer-download\n","\n","Caso n√£o consiga baixar, pode usar o arquivo que compartilhei no Drive;"],"metadata":{"id":"vyuum71KnFkY"}},{"cell_type":"markdown","source":["# Download dos resultados de docking molecular"],"metadata":{"id":"1t9x5d-VW79H"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"T3VcVO4NinN5","colab":{"base_uri":"https://localhost:8080/","height":384},"executionInfo":{"status":"error","timestamp":1736540027832,"user_tz":180,"elapsed":548,"user":{"displayName":"Jos√© Cirilo","userId":"11619379267683862192"}},"outputId":"a982fc4d-ad12-47d0-88e9-7c56d14ef37c"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/smiles/docking\n","Baixando os resultados\n","\tzip warning: name not matched: Docking_molecular_CNP0365174.1\n","\n","zip error: Nothing to do! (try: zip -r Docking_molecular_CNP0365174.1.zip . -i Docking_molecular_CNP0365174.1)\n"]},{"output_type":"error","ename":"FileNotFoundError","evalue":"Cannot find file: Docking_molecular_CNP0365174.1.zip","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-53-1a771bd0b5d9>\u001b[0m in \u001b[0;36m<cell line: 14>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m#but you need to disable your adblocker in order for it to work\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdownload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{folder_name}.zip\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mdownload\u001b[0;34m(filename)\u001b[0m\n\u001b[1;32m    231\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0m_os\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    232\u001b[0m     \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Cannot find file: {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 233\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mFileNotFoundError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=undefined-variable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    234\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    235\u001b[0m   \u001b[0mcomm_manager\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_IPython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkernel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcomm_manager\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: Cannot find file: Docking_molecular_CNP0365174.1.zip"]}],"source":["#@title **Caso queira, poder√° realizar o download de todos os arquivos com os dados obtidos**\n","\n","docking_results_path = '/content/drive/MyDrive/smiles/docking' #@param {type:\"string\"}\n","folder_name = 'Docking_molecular_CNP0365174.1' #@param {type:\"string\"}\n","\n","\n","%cd {docking_results_path}\n","\n","print(\"Baixando os resultados\")\n","!zip -r {folder_name}.zip $folder_name\n","#By default, automatic download is enabled through the following lines\n","#but you need to disable your adblocker in order for it to work\n","from google.colab import files\n","files.download(f\"{folder_name}.zip\")"]}],"metadata":{"colab":{"provenance":[{"file_id":"1-4KWoJb2huPzMpMWSeXD-lYPM38Sx_4R","timestamp":1734221508130},{"file_id":"1SmZZbrD6g0cQYrh7aSjEOVHQfDm0W4Bg","timestamp":1701703843763}],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.9"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}